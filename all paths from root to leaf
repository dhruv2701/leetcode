/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        if(root==NULL)
            return ans;
        if(root->left==NULL && root->right==NULL)
        {
            ans.push_back(to_string(root->val));
            return ans;
        }
        if(root->left)
        {
            vector<string> lsubtree = binaryTreePaths(root->left);
            for(int i=0;i<lsubtree.size();i++)
            {
                // string path1 = to_string(root->val) + "->" + lsubtree[i];
                ans.push_back(to_string(root->val) + "->" + lsubtree[i]);
            }
        }
        if(root->right)
        {
            vector<string> rsubtree = binaryTreePaths(root->right);  
            for(int i=0;i<rsubtree.size();i++)
            {
                // string path2 = to_string(root->val) + "->" + rsubtree[i];
                ans.push_back(to_string(root->val) + "->" + rsubtree[i]);
            }
        }   
        return ans;
    }
};
