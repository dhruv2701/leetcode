#include <bits/stdc++.h>
using namespace std;

struct TreeNode  
{ 
  int key; 
  TreeNode *left; 
  TreeNode *right; 
  TreeNode(int k){
      key=k;
      left=right=NULL;
  }
};
struct queueNode{
    TreeNode *node;
    queueNode *next;
    queueNode(TreeNode *root){
        // queueNode *tmp = new queueNode(root);
        node = root;
        next = NULL;
    }
};

struct  Queue{
    queueNode *front;
    queueNode *rear;
    Queue(){
        front=rear=NULL;
    }
    void enqueue(TreeNode *root){
        queueNode *tmp =  new queueNode(root);
        // tmp->node = root;
        // tmp->next = NULL;
        
        if(rear==NULL){
            front = rear = tmp;
            return;
        }
        rear->next = tmp;
        rear = tmp;
    }
    TreeNode *dequeue(){
        TreeNode *node = front == NULL ? NULL : front->node ;
        if(front==NULL)
        return node;
        
        queueNode *temp = front;
        front = front->next;
        delete(temp);
        if(front==NULL)
        rear = NULL;
        
        return node;
    }
};

void printLevel(TreeNode *root){
    if(root==NULL)return;
    Queue q;
    q.enqueue(root);
    while(q.rear!=NULL){
        TreeNode *curr=q.dequeue();
        cout<<curr->key<<" ";
        if(curr->left!=NULL)
            q.enqueue(curr->left);
        if(curr->right!=NULL)
            q.enqueue(curr->right);
    }
}  

int main() {
	
	TreeNode *root=new TreeNode(10);
	root->left=new TreeNode(20);
	root->right=new TreeNode(30);
	root->left->left=new TreeNode(40);
	root->left->right=new TreeNode(50);
	root->right->left=new TreeNode(60);
	root->right->right=new TreeNode(70);
	
	printLevel(root);
}
